壹、observe()都干了什么(参数有两个 1、data  2、asRootData判断是否为根组件)
  一、判断参数是否为对象(一般都是，因为传的都是处理过的data)或VNode实例
      1、不是对象或者不是VNode实例则直接return
      2、不满足上面的条件,那么                 ↓(进行下一步)

  二、(1)判断参数是否存在__ob__属性，并且__ob__是Observer类的实例
        为什么要判断？
          原因: 避免重复观测一个数据对象
        1、满足以上条件,将__ob__数据缓存给ob变量
        2、不满足,那么                        ↓(进行下一步)

      (2)当不满足(1)的情况下,那就说明是需要观测这个数据的,但依然需要满足5个条件
          ①、shouldObserve变量为true(其实就是一个开关用来避免数据被观测)
          ②、不是服务端渲染
          ③、参数必须是对象或者数组
          ④、参数必须是可扩展的(也就是考验添加新的属性)
          ⑤、这个参数不能是vue实例(用来避免Vue实例对象被观测)
        1、满足以上条件,则观测这个参数,这个观测具体干了什么请看(贰)
        2、不满足,那么                        ↓(进行下一步)

  三、判断是否为根组件并且ob变量存在
      1、满足, ob对象中的vmCount属性+1
      4、不满足,那么                        ↓(进行下一步)

  四、直接将ob变量输出(也就是return出来)

贰、创建Observer类的时候都干了些什么,也就是怎么观测(壹)中的data参数的
  ------------为了方便,Observer实例我们统一称呼ob对象,也对应了(壹)中的ob---------------------------
  一、将参数data赋值给ob对象的value属性

  二、实例化了一个Dep类赋值给了ob对象的dep属性,这个属性其实是用来收集依赖的'筐'

  三、将0常量赋值给ob对象的vmCount属性,这个也对应了(壹)中的第三步满足时的操作

  四、为参数data添加__ob__属性,并且为__ob__属性添加了描述符，其中__ob__属性原型对象中的enumerable为false,
     通俗讲就是循环data对象的时候，__ob__这个属性循环不出来，也就是不可被枚举

  五、(1)判断参数data是否为数组
        1、满足条件,将执行以下两步操作
           第一步: 为data参数添加数组原型链(可能是怕用户设置原型链为空的数组)
           第二部: 执行ob对象的observeArray(),这个方法其实也没干什么,其实就是循环这个数组,将数组中的每一项
                  作为data参数传值给(壹)observe(),在依次执行下来(也就是深遍历数组,对数组中的对象或数组进行观测)
        2、不满足,那么                        ↓(进行下一步)

      (2)当不满足(1)的情况下,走到的这一步,说明data参数不为数组,是一个纯对象,只做了一步操作
         第一步: 执行ob对象的walk(),这个方法其实和(1)中的做的操作差不多,只不过(1)中是深遍历数组,
                而这个是深遍历对象,用来观测对象中的数组或对象,执行的是defineReactive()
                  defineReactive()都干了什么请看(叁)

叁、defineReactive()都干了些什么?(作用: 为对象添加拦截器)
  前言: 首先这个方法是必定会做的，因为最开始壹中的data参数必定是对象
  (他有5个参数, 1、obj对象(必传) 2、key字符串(必传) 3、val值(必传) 4、customSetter函数(可传) 5、shallow布尔(可传))

  一、创建值为Dep实例的dep变量

  二、获取obj对象中key属性的描述符赋值给property变量

  三、判断property是否存在 && property中的configurable属性是否===false
      1、满足,直接终止该方法
      2、不满足,那么                        ↓(进行下一步)

  四、获取property对象中的get方法赋值给getter, set方法赋值给setter

  五、判断(getter是否不存在或set是否存在) && 该方法是否只传了2个参数
      1、满足,将val参数赋值为obj对象中key的值
      2、不满足,那么                        ↓(进行下一步)

  六、按流程下来shallow参数必定为false,所以又将会回到流程(壹)去,在从壹按流程下来,也就是将val当做参数
      传递给observe(),并将observe()返回的值赋值给childOb变量

  七、为obj对象的key属性添加描述符,这一步很重要。
      get():
             1、判断getter是否存在
                存在: 执行getter()将返回的值赋值给value变量
                不存在: 直接将赋值过的val参数赋值给value变量

             2、判断全局对象Dep的target属性是否存在
                存在:
                    第一步: 执行dep变量的depend()(也就是收集依赖)
                    第二步: 判断childOb是否存在(这个变量的值其实就是__ob__属性也就是Observer实例)
                           (简单说就是这一步就是判断obj对象中属性值是否为对象或数组,并且是否有被观测过)
                            存在: 执行childOb对象的dep对象属性的depend()(也是收集依赖)
                                  然后继续往下走                    ↓(进行下一步)

                                  判断value值是否为数组(也就是obj对象的key值)
                                    满足: 执行dependArray(),并将value作为参数传入该对象
                                      (该方法的作用: 为数组中的(已被观测过的值)执行dep.depend()收集依赖,并且值为数组时递归进行)

                            不存在: 什么也不干

      set():
             1、判断getter是否存在(这一步是获取并缓存旧值)
                 存在: 执行getter()将返回的值赋值给value变量
                 不存在: 直接将赋值过的val参数赋值给value变量

             2、值没有变化时或者新值和旧值都为NaN时直接终止该方法
                newVal !== newVal && value !== value：我试了下只有当值为NaN时才会这样

             3、非生产环境下customSetter函数存在则执行（其实这个函数一般是用来警告提示错误的）

             4、setter存在则执行setter方法赋值新值，不存在则直接讲val参数替换成新值

             5、如果赋值的新值为对象或数组则重新回到(壹)执行observe(),重新对数据进行观测

             6、执行那些收集的依赖



总结： 为data生成一个__ob__属性,这个属性保存的是一个Observer实例。

      bserver实例干了什么呢？
        1、其实就是遍历这个data属性,为这个属性单独创建了一个私有的依赖收集器,也就是Dep实例。

        2、并且如果这个属性值是对象或数组的话，那么就会为这个值生成一个__ob__属性(Observer实例)。

        3、[这个值为对象或数组的属性]中的[属性值或某一项值]为数组或对象则有会生成一个__ob__属性(Observer实例)，
          其实就是递归进行的1-2-3-4

        4、为这个属性添加get和set描述符，
          其中get()就是的作用就是在读取这个属性时往私有的依赖收集器中丢入依赖,如果值为对象或数组则往__ob__属性的
          dep属性(Dep实例即依赖收集齐)中丢入依赖，其中数组要深遍历收集依赖如果项值为数组或对象

          set()的作用就是当你赋的新值为对象或数组时，重新为这个新值执行1-2-3-4,然后执行那些收集起来的依赖







































